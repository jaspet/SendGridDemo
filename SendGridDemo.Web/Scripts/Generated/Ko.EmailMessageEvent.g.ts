
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class EmailMessageEvent extends Coalesce.BaseViewModel {
        public readonly modelName = "EmailMessageEvent";
        public readonly primaryKeyName = "emailMessageEventId";
        public readonly modelDisplayName = "Email Message Event";
        public readonly apiController = "/EmailMessageEvent";
        public readonly viewController = "/EmailMessageEvent";
        
        /** Configuration for all instances of EmailMessageEvent. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<EmailMessageEvent>
            = new Coalesce.ViewModelConfiguration<EmailMessageEvent>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current EmailMessageEvent instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<EmailMessageEvent>(EmailMessageEvent.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.EmailMessageEventDataSources = ListViewModels.EmailMessageEventDataSources;
        
        
        public emailMessageEventId: KnockoutObservable<number | null> = ko.observable(null);
        public fkEmailMessageId: KnockoutObservable<number | null> = ko.observable(null);
        public emailMessage: KnockoutObservable<ViewModels.EmailMessage | null> = ko.observable(null);
        public timeStamp: KnockoutObservable<number | null> = ko.observable(null);
        public eventTime: KnockoutObservable<moment.Moment | null> = ko.observable(moment());
        public event: KnockoutObservable<string | null> = ko.observable(null);
        public sendGridEventId: KnockoutObservable<string | null> = ko.observable(null);
        public response: KnockoutObservable<string | null> = ko.observable(null);
        public url: KnockoutObservable<string | null> = ko.observable(null);
        
        
        /** Display text for EmailMessage */
        public emailMessageText: KnockoutComputed<string>;
        
        
        
        
        /** Pops up a stock editor for object emailMessage */
        public showEmailMessageEditor: (callback?: any) => void;
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.emailMessageEventId;
            this.emailMessageEventId(data.emailMessageEventId);
            // Load the lists of other objects
            if (!data.emailMessage) { 
                if (data.fkEmailMessageId != this.fkEmailMessageId()) {
                    this.emailMessage(null);
                }
            } else {
                if (!this.emailMessage()){
                    this.emailMessage(new EmailMessage(data.emailMessage, this));
                } else {
                    this.emailMessage()!.loadFromDto(data.emailMessage);
                }
                if (this.parent instanceof EmailMessage && this.parent !== this.emailMessage() && this.parent.pkMessageId() == this.emailMessage()!.pkMessageId())
                {
                    this.parent.loadFromDto(data.emailMessage, undefined, false);
                }
            }
            
            // The rest of the objects are loaded now.
            this.fkEmailMessageId(data.fkEmailMessageId);
            this.timeStamp(data.timeStamp);
            if (data.eventTime == null) this.eventTime(null);
            else if (this.eventTime() == null || this.eventTime()!.valueOf() != new Date(data.eventTime).getTime()){
                this.eventTime(moment(new Date(data.eventTime)));
            }
            this.event(data.event);
            this.sendGridEventId(data.sendGridEventId);
            this.response(data.response);
            this.url(data.url);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.emailMessageEventId = this.emailMessageEventId();
            
            dto.fkEmailMessageId = this.fkEmailMessageId();
            if (!dto.fkEmailMessageId && this.emailMessage()) {
                dto.fkEmailMessageId = this.emailMessage()!.pkMessageId();
            }
            dto.timeStamp = this.timeStamp();
            dto.event = this.event();
            dto.sendGridEventId = this.sendGridEventId();
            dto.response = this.response();
            dto.url = this.url();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            // See if this.emailMessage needs to be loaded.
            if (this.emailMessage() == null && this.fkEmailMessageId() != null) {
                loadingCount++;
                var emailMessageObj = new EmailMessage();
                emailMessageObj.load(this.fkEmailMessageId(), () => {
                    loadingCount--;
                    this.emailMessage(emailMessageObj);
                    if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
                });
            }
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.fkEmailMessageId.extend({ required: {params: true, message: "Email Message is required."} }),
                this.sendGridEventId.extend({ maxLength: 100 }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.EmailMessageEventList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            this.emailMessageText = ko.pureComputed(function() {
                if (self.emailMessage() && self.emailMessage()!.pkMessageId()) {
                    return self.emailMessage()!.pkMessageId()!.toString();
                } else {
                    return "None";
                }
            });
            
            
            
            
            this.showEmailMessageEditor = function(callback: any) {
                if (!self.emailMessage()) {
                    self.emailMessage(new EmailMessage());
                }
                self.emailMessage()!.showEditor(callback)
            };
            
            self.fkEmailMessageId.subscribe(self.autoSave);
            self.emailMessage.subscribe(self.autoSave);
            self.timeStamp.subscribe(self.autoSave);
            self.event.subscribe(self.autoSave);
            self.sendGridEventId.subscribe(self.autoSave);
            self.response.subscribe(self.autoSave);
            self.url.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace EmailMessageEvent {
    }
}
