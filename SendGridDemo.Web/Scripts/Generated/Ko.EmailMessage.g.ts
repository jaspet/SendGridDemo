
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class EmailMessage extends Coalesce.BaseViewModel {
        public readonly modelName = "EmailMessage";
        public readonly primaryKeyName = "pkMessageId";
        public readonly modelDisplayName = "Email Message";
        public readonly apiController = "/EmailMessage";
        public readonly viewController = "/EmailMessage";
        
        /** Configuration for all instances of EmailMessage. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<EmailMessage>
            = new Coalesce.ViewModelConfiguration<EmailMessage>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current EmailMessage instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<EmailMessage>(EmailMessage.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.EmailMessageDataSources = ListViewModels.EmailMessageDataSources;
        
        
        public subject: KnockoutObservable<string | null> = ko.observable(null);
        public emailEvents: KnockoutObservableArray<ViewModels.EmailMessageEvent> = ko.observableArray([]);
        public lastStatus: KnockoutObservable<string | null> = ko.observable(null);
        public pkMessageId: KnockoutObservable<number | null> = ko.observable(null);
        public messageId: KnockoutObservable<string | null> = ko.observable(null);
        public to: KnockoutObservable<string | null> = ko.observable(null);
        public messageText: KnockoutObservable<string | null> = ko.observable(null);
        
        
        
        /** Add object to emailEvents */
        public addToEmailEvents = (autoSave?: boolean | null): EmailMessageEvent => {
            var newItem = new EmailMessageEvent();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.emailEvents;
            newItem.isExpanded(true);
            newItem.fkEmailMessageId(this.pkMessageId());
            this.emailEvents.push(newItem);
            return newItem;
        };
        
        /** ListViewModel for EmailEvents. Allows for loading subsets of data. */
        public emailEventsList: (loadImmediate?: boolean) => ListViewModels.EmailMessageEventList;
        
        
        /** Url for a table view of all members of collection EmailEvents for the current object. */
        public emailEventsListUrl: KnockoutComputed<string> = ko.computed(
            () => this.coalesceConfig.baseViewUrl() + '/EmailMessageEvent/Table?filter.fkEmailMessageId=' + this.pkMessageId(),
            null, { deferEvaluation: true }
        );
        
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.pkMessageId;
            this.pkMessageId(data.pkMessageId);
            // Load the lists of other objects
            if (data.emailEvents != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.emailEvents, data.emailEvents, 'emailMessageEventId', EmailMessageEvent, this, allowCollectionDeletes);
            }
            
            // The rest of the objects are loaded now.
            this.subject(data.subject);
            this.lastStatus(data.lastStatus);
            this.messageId(data.messageId);
            this.to(data.to);
            this.messageText(data.messageText);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.pkMessageId = this.pkMessageId();
            
            dto.subject = this.subject();
            dto.messageId = this.messageId();
            dto.to = this.to();
            dto.messageText = this.messageText();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.subject.extend({ maxLength: 100 }),
                this.messageId.extend({ maxLength: 100 }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.EmailMessageList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            
            
            // List Object model for EmailEvents. Allows for loading subsets of data.
            var _emailEventsList: ListViewModels.EmailMessageEventList;
            this.emailEventsList = function(loadImmediate = true) {
                if (!_emailEventsList) {
                    _emailEventsList = new ListViewModels.EmailMessageEventList();
                    if (loadImmediate) loadEmailEventsList();
                    self.pkMessageId.subscribe(loadEmailEventsList)
                }
                return _emailEventsList;
            }
            function loadEmailEventsList() {
                if (self.pkMessageId()) {
                    _emailEventsList.queryString = "filter.fkEmailMessageId=" + self.pkMessageId();
                    _emailEventsList.load();
                }
            }
            
            
            
            self.subject.subscribe(self.autoSave);
            self.messageId.subscribe(self.autoSave);
            self.to.subscribe(self.autoSave);
            self.messageText.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace EmailMessage {
    }
}
