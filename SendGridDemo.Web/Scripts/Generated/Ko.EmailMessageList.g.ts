
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ListViewModels {
    
    export namespace EmailMessageDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.EmailMessage> { }
    }
    
    export class EmailMessageList extends Coalesce.BaseListViewModel<ViewModels.EmailMessage> {
        public readonly modelName: string = "EmailMessage";
        public readonly apiController: string = "/EmailMessage";
        public modelKeyName: string = "pkMessageId";
        public itemClass: new () => ViewModels.EmailMessage = ViewModels.EmailMessage;
        
        public filter: {
            subject?: string;
            pkMessageId?: string;
            messageId?: string;
            to?: string;
            messageText?: string;
        } | null = null;
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof EmailMessageDataSources = EmailMessageDataSources;
        
        /** The data source on the server to use when retrieving objects. Valid values are in this.dataSources. */
        public dataSource: Coalesce.DataSource<ViewModels.EmailMessage> = new this.dataSources.Default();
        
        /** Configuration for all instances of EmailMessageList. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<EmailMessageList, ViewModels.EmailMessage>(Coalesce.GlobalConfiguration.listViewModel);
        
        /** Configuration for this EmailMessageList instance. */
        public coalesceConfig: Coalesce.ListViewModelConfiguration<EmailMessageList, ViewModels.EmailMessage>
            = new Coalesce.ListViewModelConfiguration<EmailMessageList, ViewModels.EmailMessage>(EmailMessageList.coalesceConfig);
        
        
        /**
            Methods and properties for invoking server method SendEmail.
        */
        public readonly sendEmail = new EmailMessageList.SendEmail(this);
        public static SendEmail = class SendEmail extends Coalesce.ClientMethod<EmailMessageList, string> {
            public readonly name = 'SendEmail';
            public readonly verb = 'POST';
            
            /** Calls server method (SendEmail) with the given arguments */
            public invoke = (to: string | null, subject: string | null, message: string | null, callback?: (result: string) => void, reload: boolean = true): JQueryPromise<any> => {
                return this.invokeWithData({ to: to, subject: subject, message: message }, callback, reload);
            };
            
            /** Object that can be easily bound to fields to allow data entry for the method's parameters */
            public args = new SendEmail.Args(); 
            public static Args = class Args {
                public to: KnockoutObservable<string | null> = ko.observable(null);
                public subject: KnockoutObservable<string | null> = ko.observable(null);
                public message: KnockoutObservable<string | null> = ko.observable(null);
            };
            
            /** Calls server method (SendEmail) with an instance of SendEmail.Args, or the value of this.args if not specified. */
            public invokeWithArgs = (args = this.args, callback?: (result: string) => void, reload: boolean = true): JQueryPromise<any> => {
                return this.invoke(args.to(), args.subject(), args.message(), callback, reload);
            }
            
            /** Invokes the method after displaying a browser-native prompt for each argument. */
            public invokeWithPrompts = (callback?: (result: string) => void, reload: boolean = true): JQueryPromise<any> | undefined => {
                var $promptVal: string | null = null;
                $promptVal = prompt('To');
                if ($promptVal === null) return;
                var to: string = $promptVal;
                $promptVal = prompt('Subject');
                if ($promptVal === null) return;
                var subject: string = $promptVal;
                $promptVal = prompt('Message');
                if ($promptVal === null) return;
                var message: string = $promptVal;
                return this.invoke(to, subject, message, callback, reload);
            };
            
            protected loadResponse = (data: Coalesce.ItemResult, callback?: (result: string) => void, reload: boolean = true) => {
                this.result(data.object);
                if (reload) {
                    var result = this.result();
                    this.parent.load(typeof(callback) == 'function' ? () => callback(result) : undefined);
                } else if (typeof(callback) == 'function') {
                    callback(this.result());
                }
            };
        };
        
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.EmailMessage(newItem, parent);
        
        constructor() {
            super();
        }
    }
}
