@using IntelliTect.Coalesce.Knockout.Helpers

@{ ViewBag.Fluid = true; }

<style>
    td div a {
        display: block;
    }
    th.sortable-header {
        cursor: pointer;
    }
    th.sortable-header:hover {
        background-color: #e6e6e6
    }
    .table-view-header {
        padding: 10px 15px;
    }
</style>
<div class="table-view obj-smsMessage">
    <div class="table-view-header">
        <div class="clearfix">
            <h1 style="display: inline-block">
                Sms Message List
                <span style="font-size: .5em; padding-left: 20px;"><a href="~/SmsMessage/Docs">API Docs</a></span>
            </h1>
        </div>
        <div class="clearfix">
            <div style="display: inline-block; font-size: 1.1em; margin-right: 10px;">
                <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled() && !isLoading(), click: previousPage"></i>
                Page
                <input data-bind="value: page" style="width: 35px">
                of
                <span data-bind="text: pageCount"></span>
                <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled() && !isLoading(), click: nextPage"></i>
            </div>
            <select class="form-control" style="width: 100px; display: inline-block;" data-bind="value: pageSize">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
            </select>
            <input class="form-control pull-right" style="width: 250px; margin-left: 20px" data-bind="textInput: search" placeholder="Search" />
            <div class="btn-group pull-right">
                <a href="~/SmsMessage/CreateEdit?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-plus"></i> Create</a>
                <button data-bind="click:load" class="btn btn-sm btn-default "><i class="fa fa-refresh"></i> Refresh</button>
                @if (ViewBag.Editable)
                {
                    <a href="~/SmsMessage/Table?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-lock"></i> Make Read-only</a>
                }
                else
                {
                    <a href="~/SmsMessage/TableEdit?@ViewBag.Query" role="button" class="btn btn-sm btn-default "><i class="fa fa-pencil"></i> Make Editable</a>
                }
                <a href="#" role="button" class="btn btn-sm btn-default " data-bind="attr:{href: downloadAllCsvUrl}"><i class="fa fa-download"></i> CSV</a>
                <button role="button" class="btn btn-sm btn-default " data-bind="click: csvUploadUi"><i class="fa fa-upload"></i> CSV</button>
            </div>
        </div>
    </div>
    <hr />
    <div class="card table-view-body">
        <div class="card-body">
            <table class="table @(ViewBag.Editable ? "editable" : "" )">
                <thead>
                    <tr>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Subject')}">
                            Subject
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Subject', 'fa-caret-down': orderByDescending() == 'Subject'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('MessageId')}">
                            Message Id
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'MessageId', 'fa-caret-down': orderByDescending() == 'MessageId'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('To')}">
                            To
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'To', 'fa-caret-down': orderByDescending() == 'To'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('MessageText')}">
                            Message Text
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'MessageText', 'fa-caret-down': orderByDescending() == 'MessageText'}"></i>
                        </th>
                        <th style="width: 1%">
                        </th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: items">
                    <tr data-bind="css: {'btn-warning': errorMessage()}, attr: {id: pkMessageId}">
                        @if (@ViewBag.Editable)
                        {
                            <td class="prop-subject">@(Knockout.InputFor<SendGridDemo.Data.Models.SmsMessage>(p => p.Subject))</td>
                            <td class="prop-messageId">@(Knockout.InputFor<SendGridDemo.Data.Models.MessageBase>(p => p.MessageId))</td>
                            <td class="prop-to">@(Knockout.InputFor<SendGridDemo.Data.Models.MessageBase>(p => p.To))</td>
                            <td class="prop-messageText">@(Knockout.InputFor<SendGridDemo.Data.Models.MessageBase>(p => p.MessageText))</td>
                        }
                        else
                        {
                            <td class="prop-subject">@(Knockout.DisplayFor<SendGridDemo.Data.Models.SmsMessage>(p => p.Subject, true))</td>
                            <td class="prop-messageId">@(Knockout.DisplayFor<SendGridDemo.Data.Models.MessageBase>(p => p.MessageId, true))</td>
                            <td class="prop-to">@(Knockout.DisplayFor<SendGridDemo.Data.Models.MessageBase>(p => p.To, true))</td>
                            <td class="prop-messageText">@(Knockout.DisplayFor<SendGridDemo.Data.Models.MessageBase>(p => p.MessageText, true))</td>
                        }
                        <td>
                            <!-- Editor buttons -->
                            <div class="btn-group pull-right" role="group" style="display: inline-flex">
                                <a class="btn btn-sm btn-default" data-bind="attr: { href: editUrl }">
                                    <i class="fa fa-pencil"></i>
                                </a>
                                <button class="btn btn-sm btn-danger" data-bind="click: deleteItemWithConfirmation">
                                    <i class="fa fa-remove"></i>
                                </button>
                            </div>
                            <div class="form-control-static" data-bind="text: errorMessage"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-heading">
        <h3 class="card-title">Actions</h3>
    </div>
    <div class="card-body">
        <table class="table">
            <thead>
                <tr>
                    <th style="width: 20%;">Action</th>
                    <th style="width: 50%;">Result</th>
                    <th style="width: 20%;">Successful</th>
                    <th style="width: 10%;"></th>
                </tr>
            </thead>
            <tbody>
                <tr data-bind="with: sendSms">
                    <td>
                        <button class="btn btn-default btn-xs" data-bind="click: function(){ $('#method-SendSms').modal() }">
                            Send Sms
                        </button>
                    </td>
                    <td>
                        <span data-bind="text: result"></span>
                    </td>
                    <td>
                        <span data-bind="text: wasSuccessful"></span>
                        <span data-bind="text: message"></span>
                    </td>
                    <td>
                        <span class="label label-info" data-bind="fadeVisible: isLoading">Loading</span>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<!-- Modal for method: SendSms -->
<div class="modal fade" id="method-SendSms" tabindex="-1" role="dialog" data-bind="with: sendSms">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>&times;</span></button>
                <h4 class='modal-title'>Send Sms</h4>
            </div>
            <div class="modal-body form-horizontal" data-bind="with: args">
                <div class="form-group">
                    <label class='col-md-4 control-label'>To</label>
                    <div class="col-md-8">
                        <input type='text' class='form-control' data-bind='value: to'>
                    </div>
                </div>
                <div class="form-group">
                    <label class='col-md-4 control-label'>Message</label>
                    <div class="col-md-8">
                        <input type='text' class='form-control' data-bind='value: message'>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type='button' class='btn btn-default' data-dismiss='modal'>Cancel</button>
                <button type='button' class='btn btn-primary btn-ok'
                    data-bind="click: invokeWithArgs.bind(this, args, function(){jQuery($element).closest('.modal').modal('hide')}, null)">
                    OK
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        @if (!ViewBag.Editable)
        {
            @:Coalesce.GlobalConfiguration.viewModel.setupValidationAutomatically(false);
        }
        var smsMessageList = new ListViewModels.SmsMessageList();
        
        // Set up parent info based on the URL.
        @if (ViewBag.Query != null)
        {
            @:smsMessageList.queryString = "@(ViewBag.Query)";
        }
        
        // Save and restore values from the URL:
        var urlVariables = ['page', 'pageSize', 'search', 'orderBy', 'orderByDescending'];
        $.each(urlVariables, function(){
            var param = Coalesce.Utilities.GetUrlParameter(this);
            if (param) {smsMessageList[this](param);}
        })
        smsMessageList.isLoading.subscribe(function(){
            var newUrl = window.location.href;
        
            $.each(urlVariables, function(){
                var param = smsMessageList[this]();
                newUrl = Coalesce.Utilities.SetUrlParameter(newUrl, this, param);
            })
            history.replaceState(null, document.title, newUrl);
        });
        
        smsMessageList.isSavingAutomatically = false;
        ko.applyBindings(smsMessageList);
        smsMessageList.isSavingAutomatically = true;
        
        smsMessageList.includes = "SmsMessageListGen";
        smsMessageList.load();
    </script>
}
